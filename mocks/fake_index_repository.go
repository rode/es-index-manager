// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/rode/es-index-manager/indexmanager"
)

type FakeIndexRepository struct {
	CreateIndexStub        func(context.Context, string, string, string) error
	createIndexMutex       sync.RWMutex
	createIndexArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	createIndexReturns struct {
		result1 error
	}
	createIndexReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteIndexStub        func(context.Context, string) error
	deleteIndexMutex       sync.RWMutex
	deleteIndexArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteIndexReturns struct {
		result1 error
	}
	deleteIndexReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIndexRepository) CreateIndex(arg1 context.Context, arg2 string, arg3 string, arg4 string) error {
	fake.createIndexMutex.Lock()
	ret, specificReturn := fake.createIndexReturnsOnCall[len(fake.createIndexArgsForCall)]
	fake.createIndexArgsForCall = append(fake.createIndexArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateIndexStub
	fakeReturns := fake.createIndexReturns
	fake.recordInvocation("CreateIndex", []interface{}{arg1, arg2, arg3, arg4})
	fake.createIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexRepository) CreateIndexCallCount() int {
	fake.createIndexMutex.RLock()
	defer fake.createIndexMutex.RUnlock()
	return len(fake.createIndexArgsForCall)
}

func (fake *FakeIndexRepository) CreateIndexCalls(stub func(context.Context, string, string, string) error) {
	fake.createIndexMutex.Lock()
	defer fake.createIndexMutex.Unlock()
	fake.CreateIndexStub = stub
}

func (fake *FakeIndexRepository) CreateIndexArgsForCall(i int) (context.Context, string, string, string) {
	fake.createIndexMutex.RLock()
	defer fake.createIndexMutex.RUnlock()
	argsForCall := fake.createIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIndexRepository) CreateIndexReturns(result1 error) {
	fake.createIndexMutex.Lock()
	defer fake.createIndexMutex.Unlock()
	fake.CreateIndexStub = nil
	fake.createIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexRepository) CreateIndexReturnsOnCall(i int, result1 error) {
	fake.createIndexMutex.Lock()
	defer fake.createIndexMutex.Unlock()
	fake.CreateIndexStub = nil
	if fake.createIndexReturnsOnCall == nil {
		fake.createIndexReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createIndexReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexRepository) DeleteIndex(arg1 context.Context, arg2 string) error {
	fake.deleteIndexMutex.Lock()
	ret, specificReturn := fake.deleteIndexReturnsOnCall[len(fake.deleteIndexArgsForCall)]
	fake.deleteIndexArgsForCall = append(fake.deleteIndexArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteIndexStub
	fakeReturns := fake.deleteIndexReturns
	fake.recordInvocation("DeleteIndex", []interface{}{arg1, arg2})
	fake.deleteIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexRepository) DeleteIndexCallCount() int {
	fake.deleteIndexMutex.RLock()
	defer fake.deleteIndexMutex.RUnlock()
	return len(fake.deleteIndexArgsForCall)
}

func (fake *FakeIndexRepository) DeleteIndexCalls(stub func(context.Context, string) error) {
	fake.deleteIndexMutex.Lock()
	defer fake.deleteIndexMutex.Unlock()
	fake.DeleteIndexStub = stub
}

func (fake *FakeIndexRepository) DeleteIndexArgsForCall(i int) (context.Context, string) {
	fake.deleteIndexMutex.RLock()
	defer fake.deleteIndexMutex.RUnlock()
	argsForCall := fake.deleteIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIndexRepository) DeleteIndexReturns(result1 error) {
	fake.deleteIndexMutex.Lock()
	defer fake.deleteIndexMutex.Unlock()
	fake.DeleteIndexStub = nil
	fake.deleteIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexRepository) DeleteIndexReturnsOnCall(i int, result1 error) {
	fake.deleteIndexMutex.Lock()
	defer fake.deleteIndexMutex.Unlock()
	fake.DeleteIndexStub = nil
	if fake.deleteIndexReturnsOnCall == nil {
		fake.deleteIndexReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteIndexReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createIndexMutex.RLock()
	defer fake.createIndexMutex.RUnlock()
	fake.deleteIndexMutex.RLock()
	defer fake.deleteIndexMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIndexRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ indexmanager.IndexRepository = new(FakeIndexRepository)
