// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/rode/es-index-manager/indexmanager"
)

type FakeMigrationOrchestrator struct {
	RunMigrationsStub        func(context.Context) error
	runMigrationsMutex       sync.RWMutex
	runMigrationsArgsForCall []struct {
		arg1 context.Context
	}
	runMigrationsReturns struct {
		result1 error
	}
	runMigrationsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMigrationOrchestrator) RunMigrations(arg1 context.Context) error {
	fake.runMigrationsMutex.Lock()
	ret, specificReturn := fake.runMigrationsReturnsOnCall[len(fake.runMigrationsArgsForCall)]
	fake.runMigrationsArgsForCall = append(fake.runMigrationsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.RunMigrationsStub
	fakeReturns := fake.runMigrationsReturns
	fake.recordInvocation("RunMigrations", []interface{}{arg1})
	fake.runMigrationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMigrationOrchestrator) RunMigrationsCallCount() int {
	fake.runMigrationsMutex.RLock()
	defer fake.runMigrationsMutex.RUnlock()
	return len(fake.runMigrationsArgsForCall)
}

func (fake *FakeMigrationOrchestrator) RunMigrationsCalls(stub func(context.Context) error) {
	fake.runMigrationsMutex.Lock()
	defer fake.runMigrationsMutex.Unlock()
	fake.RunMigrationsStub = stub
}

func (fake *FakeMigrationOrchestrator) RunMigrationsArgsForCall(i int) context.Context {
	fake.runMigrationsMutex.RLock()
	defer fake.runMigrationsMutex.RUnlock()
	argsForCall := fake.runMigrationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMigrationOrchestrator) RunMigrationsReturns(result1 error) {
	fake.runMigrationsMutex.Lock()
	defer fake.runMigrationsMutex.Unlock()
	fake.RunMigrationsStub = nil
	fake.runMigrationsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigrationOrchestrator) RunMigrationsReturnsOnCall(i int, result1 error) {
	fake.runMigrationsMutex.Lock()
	defer fake.runMigrationsMutex.Unlock()
	fake.RunMigrationsStub = nil
	if fake.runMigrationsReturnsOnCall == nil {
		fake.runMigrationsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runMigrationsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigrationOrchestrator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMigrationsMutex.RLock()
	defer fake.runMigrationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMigrationOrchestrator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ indexmanager.MigrationOrchestrator = new(FakeMigrationOrchestrator)
