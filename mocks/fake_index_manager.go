// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/rode/es-index-manager/indexmanager"
)

type FakeIndexManager struct {
	AliasNameStub        func(string, string) string
	aliasNameMutex       sync.RWMutex
	aliasNameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	aliasNameReturns struct {
		result1 string
	}
	aliasNameReturnsOnCall map[int]struct {
		result1 string
	}
	CreateIndexStub        func(context.Context, string, string, string) error
	createIndexMutex       sync.RWMutex
	createIndexArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	createIndexReturns struct {
		result1 error
	}
	createIndexReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteIndexStub        func(context.Context, string) error
	deleteIndexMutex       sync.RWMutex
	deleteIndexArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteIndexReturns struct {
		result1 error
	}
	deleteIndexReturnsOnCall map[int]struct {
		result1 error
	}
	IndexNameStub        func(string, string) string
	indexNameMutex       sync.RWMutex
	indexNameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	indexNameReturns struct {
		result1 string
	}
	indexNameReturnsOnCall map[int]struct {
		result1 string
	}
	InitializeStub        func(context.Context) error
	initializeMutex       sync.RWMutex
	initializeArgsForCall []struct {
		arg1 context.Context
	}
	initializeReturns struct {
		result1 error
	}
	initializeReturnsOnCall map[int]struct {
		result1 error
	}
	LoadMappingsStub        func() error
	loadMappingsMutex       sync.RWMutex
	loadMappingsArgsForCall []struct {
	}
	loadMappingsReturns struct {
		result1 error
	}
	loadMappingsReturnsOnCall map[int]struct {
		result1 error
	}
	MappingStub        func(string) *indexmanager.VersionedMapping
	mappingMutex       sync.RWMutex
	mappingArgsForCall []struct {
		arg1 string
	}
	mappingReturns struct {
		result1 *indexmanager.VersionedMapping
	}
	mappingReturnsOnCall map[int]struct {
		result1 *indexmanager.VersionedMapping
	}
	RunMigrationsStub        func(context.Context) error
	runMigrationsMutex       sync.RWMutex
	runMigrationsArgsForCall []struct {
		arg1 context.Context
	}
	runMigrationsReturns struct {
		result1 error
	}
	runMigrationsReturnsOnCall map[int]struct {
		result1 error
	}
	VersionStub        func(string) string
	versionMutex       sync.RWMutex
	versionArgsForCall []struct {
		arg1 string
	}
	versionReturns struct {
		result1 string
	}
	versionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIndexManager) AliasName(arg1 string, arg2 string) string {
	fake.aliasNameMutex.Lock()
	ret, specificReturn := fake.aliasNameReturnsOnCall[len(fake.aliasNameArgsForCall)]
	fake.aliasNameArgsForCall = append(fake.aliasNameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AliasNameStub
	fakeReturns := fake.aliasNameReturns
	fake.recordInvocation("AliasName", []interface{}{arg1, arg2})
	fake.aliasNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) AliasNameCallCount() int {
	fake.aliasNameMutex.RLock()
	defer fake.aliasNameMutex.RUnlock()
	return len(fake.aliasNameArgsForCall)
}

func (fake *FakeIndexManager) AliasNameCalls(stub func(string, string) string) {
	fake.aliasNameMutex.Lock()
	defer fake.aliasNameMutex.Unlock()
	fake.AliasNameStub = stub
}

func (fake *FakeIndexManager) AliasNameArgsForCall(i int) (string, string) {
	fake.aliasNameMutex.RLock()
	defer fake.aliasNameMutex.RUnlock()
	argsForCall := fake.aliasNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIndexManager) AliasNameReturns(result1 string) {
	fake.aliasNameMutex.Lock()
	defer fake.aliasNameMutex.Unlock()
	fake.AliasNameStub = nil
	fake.aliasNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIndexManager) AliasNameReturnsOnCall(i int, result1 string) {
	fake.aliasNameMutex.Lock()
	defer fake.aliasNameMutex.Unlock()
	fake.AliasNameStub = nil
	if fake.aliasNameReturnsOnCall == nil {
		fake.aliasNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.aliasNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIndexManager) CreateIndex(arg1 context.Context, arg2 string, arg3 string, arg4 string) error {
	fake.createIndexMutex.Lock()
	ret, specificReturn := fake.createIndexReturnsOnCall[len(fake.createIndexArgsForCall)]
	fake.createIndexArgsForCall = append(fake.createIndexArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateIndexStub
	fakeReturns := fake.createIndexReturns
	fake.recordInvocation("CreateIndex", []interface{}{arg1, arg2, arg3, arg4})
	fake.createIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) CreateIndexCallCount() int {
	fake.createIndexMutex.RLock()
	defer fake.createIndexMutex.RUnlock()
	return len(fake.createIndexArgsForCall)
}

func (fake *FakeIndexManager) CreateIndexCalls(stub func(context.Context, string, string, string) error) {
	fake.createIndexMutex.Lock()
	defer fake.createIndexMutex.Unlock()
	fake.CreateIndexStub = stub
}

func (fake *FakeIndexManager) CreateIndexArgsForCall(i int) (context.Context, string, string, string) {
	fake.createIndexMutex.RLock()
	defer fake.createIndexMutex.RUnlock()
	argsForCall := fake.createIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIndexManager) CreateIndexReturns(result1 error) {
	fake.createIndexMutex.Lock()
	defer fake.createIndexMutex.Unlock()
	fake.CreateIndexStub = nil
	fake.createIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) CreateIndexReturnsOnCall(i int, result1 error) {
	fake.createIndexMutex.Lock()
	defer fake.createIndexMutex.Unlock()
	fake.CreateIndexStub = nil
	if fake.createIndexReturnsOnCall == nil {
		fake.createIndexReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createIndexReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) DeleteIndex(arg1 context.Context, arg2 string) error {
	fake.deleteIndexMutex.Lock()
	ret, specificReturn := fake.deleteIndexReturnsOnCall[len(fake.deleteIndexArgsForCall)]
	fake.deleteIndexArgsForCall = append(fake.deleteIndexArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteIndexStub
	fakeReturns := fake.deleteIndexReturns
	fake.recordInvocation("DeleteIndex", []interface{}{arg1, arg2})
	fake.deleteIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) DeleteIndexCallCount() int {
	fake.deleteIndexMutex.RLock()
	defer fake.deleteIndexMutex.RUnlock()
	return len(fake.deleteIndexArgsForCall)
}

func (fake *FakeIndexManager) DeleteIndexCalls(stub func(context.Context, string) error) {
	fake.deleteIndexMutex.Lock()
	defer fake.deleteIndexMutex.Unlock()
	fake.DeleteIndexStub = stub
}

func (fake *FakeIndexManager) DeleteIndexArgsForCall(i int) (context.Context, string) {
	fake.deleteIndexMutex.RLock()
	defer fake.deleteIndexMutex.RUnlock()
	argsForCall := fake.deleteIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIndexManager) DeleteIndexReturns(result1 error) {
	fake.deleteIndexMutex.Lock()
	defer fake.deleteIndexMutex.Unlock()
	fake.DeleteIndexStub = nil
	fake.deleteIndexReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) DeleteIndexReturnsOnCall(i int, result1 error) {
	fake.deleteIndexMutex.Lock()
	defer fake.deleteIndexMutex.Unlock()
	fake.DeleteIndexStub = nil
	if fake.deleteIndexReturnsOnCall == nil {
		fake.deleteIndexReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteIndexReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) IndexName(arg1 string, arg2 string) string {
	fake.indexNameMutex.Lock()
	ret, specificReturn := fake.indexNameReturnsOnCall[len(fake.indexNameArgsForCall)]
	fake.indexNameArgsForCall = append(fake.indexNameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.IndexNameStub
	fakeReturns := fake.indexNameReturns
	fake.recordInvocation("IndexName", []interface{}{arg1, arg2})
	fake.indexNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) IndexNameCallCount() int {
	fake.indexNameMutex.RLock()
	defer fake.indexNameMutex.RUnlock()
	return len(fake.indexNameArgsForCall)
}

func (fake *FakeIndexManager) IndexNameCalls(stub func(string, string) string) {
	fake.indexNameMutex.Lock()
	defer fake.indexNameMutex.Unlock()
	fake.IndexNameStub = stub
}

func (fake *FakeIndexManager) IndexNameArgsForCall(i int) (string, string) {
	fake.indexNameMutex.RLock()
	defer fake.indexNameMutex.RUnlock()
	argsForCall := fake.indexNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIndexManager) IndexNameReturns(result1 string) {
	fake.indexNameMutex.Lock()
	defer fake.indexNameMutex.Unlock()
	fake.IndexNameStub = nil
	fake.indexNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIndexManager) IndexNameReturnsOnCall(i int, result1 string) {
	fake.indexNameMutex.Lock()
	defer fake.indexNameMutex.Unlock()
	fake.IndexNameStub = nil
	if fake.indexNameReturnsOnCall == nil {
		fake.indexNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.indexNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIndexManager) Initialize(arg1 context.Context) error {
	fake.initializeMutex.Lock()
	ret, specificReturn := fake.initializeReturnsOnCall[len(fake.initializeArgsForCall)]
	fake.initializeArgsForCall = append(fake.initializeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.InitializeStub
	fakeReturns := fake.initializeReturns
	fake.recordInvocation("Initialize", []interface{}{arg1})
	fake.initializeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) InitializeCallCount() int {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return len(fake.initializeArgsForCall)
}

func (fake *FakeIndexManager) InitializeCalls(stub func(context.Context) error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = stub
}

func (fake *FakeIndexManager) InitializeArgsForCall(i int) context.Context {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	argsForCall := fake.initializeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIndexManager) InitializeReturns(result1 error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = nil
	fake.initializeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) InitializeReturnsOnCall(i int, result1 error) {
	fake.initializeMutex.Lock()
	defer fake.initializeMutex.Unlock()
	fake.InitializeStub = nil
	if fake.initializeReturnsOnCall == nil {
		fake.initializeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initializeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) LoadMappings() error {
	fake.loadMappingsMutex.Lock()
	ret, specificReturn := fake.loadMappingsReturnsOnCall[len(fake.loadMappingsArgsForCall)]
	fake.loadMappingsArgsForCall = append(fake.loadMappingsArgsForCall, struct {
	}{})
	stub := fake.LoadMappingsStub
	fakeReturns := fake.loadMappingsReturns
	fake.recordInvocation("LoadMappings", []interface{}{})
	fake.loadMappingsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) LoadMappingsCallCount() int {
	fake.loadMappingsMutex.RLock()
	defer fake.loadMappingsMutex.RUnlock()
	return len(fake.loadMappingsArgsForCall)
}

func (fake *FakeIndexManager) LoadMappingsCalls(stub func() error) {
	fake.loadMappingsMutex.Lock()
	defer fake.loadMappingsMutex.Unlock()
	fake.LoadMappingsStub = stub
}

func (fake *FakeIndexManager) LoadMappingsReturns(result1 error) {
	fake.loadMappingsMutex.Lock()
	defer fake.loadMappingsMutex.Unlock()
	fake.LoadMappingsStub = nil
	fake.loadMappingsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) LoadMappingsReturnsOnCall(i int, result1 error) {
	fake.loadMappingsMutex.Lock()
	defer fake.loadMappingsMutex.Unlock()
	fake.LoadMappingsStub = nil
	if fake.loadMappingsReturnsOnCall == nil {
		fake.loadMappingsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loadMappingsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) Mapping(arg1 string) *indexmanager.VersionedMapping {
	fake.mappingMutex.Lock()
	ret, specificReturn := fake.mappingReturnsOnCall[len(fake.mappingArgsForCall)]
	fake.mappingArgsForCall = append(fake.mappingArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.MappingStub
	fakeReturns := fake.mappingReturns
	fake.recordInvocation("Mapping", []interface{}{arg1})
	fake.mappingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) MappingCallCount() int {
	fake.mappingMutex.RLock()
	defer fake.mappingMutex.RUnlock()
	return len(fake.mappingArgsForCall)
}

func (fake *FakeIndexManager) MappingCalls(stub func(string) *indexmanager.VersionedMapping) {
	fake.mappingMutex.Lock()
	defer fake.mappingMutex.Unlock()
	fake.MappingStub = stub
}

func (fake *FakeIndexManager) MappingArgsForCall(i int) string {
	fake.mappingMutex.RLock()
	defer fake.mappingMutex.RUnlock()
	argsForCall := fake.mappingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIndexManager) MappingReturns(result1 *indexmanager.VersionedMapping) {
	fake.mappingMutex.Lock()
	defer fake.mappingMutex.Unlock()
	fake.MappingStub = nil
	fake.mappingReturns = struct {
		result1 *indexmanager.VersionedMapping
	}{result1}
}

func (fake *FakeIndexManager) MappingReturnsOnCall(i int, result1 *indexmanager.VersionedMapping) {
	fake.mappingMutex.Lock()
	defer fake.mappingMutex.Unlock()
	fake.MappingStub = nil
	if fake.mappingReturnsOnCall == nil {
		fake.mappingReturnsOnCall = make(map[int]struct {
			result1 *indexmanager.VersionedMapping
		})
	}
	fake.mappingReturnsOnCall[i] = struct {
		result1 *indexmanager.VersionedMapping
	}{result1}
}

func (fake *FakeIndexManager) RunMigrations(arg1 context.Context) error {
	fake.runMigrationsMutex.Lock()
	ret, specificReturn := fake.runMigrationsReturnsOnCall[len(fake.runMigrationsArgsForCall)]
	fake.runMigrationsArgsForCall = append(fake.runMigrationsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.RunMigrationsStub
	fakeReturns := fake.runMigrationsReturns
	fake.recordInvocation("RunMigrations", []interface{}{arg1})
	fake.runMigrationsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) RunMigrationsCallCount() int {
	fake.runMigrationsMutex.RLock()
	defer fake.runMigrationsMutex.RUnlock()
	return len(fake.runMigrationsArgsForCall)
}

func (fake *FakeIndexManager) RunMigrationsCalls(stub func(context.Context) error) {
	fake.runMigrationsMutex.Lock()
	defer fake.runMigrationsMutex.Unlock()
	fake.RunMigrationsStub = stub
}

func (fake *FakeIndexManager) RunMigrationsArgsForCall(i int) context.Context {
	fake.runMigrationsMutex.RLock()
	defer fake.runMigrationsMutex.RUnlock()
	argsForCall := fake.runMigrationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIndexManager) RunMigrationsReturns(result1 error) {
	fake.runMigrationsMutex.Lock()
	defer fake.runMigrationsMutex.Unlock()
	fake.RunMigrationsStub = nil
	fake.runMigrationsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) RunMigrationsReturnsOnCall(i int, result1 error) {
	fake.runMigrationsMutex.Lock()
	defer fake.runMigrationsMutex.Unlock()
	fake.RunMigrationsStub = nil
	if fake.runMigrationsReturnsOnCall == nil {
		fake.runMigrationsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runMigrationsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexManager) Version(arg1 string) string {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.VersionStub
	fakeReturns := fake.versionReturns
	fake.recordInvocation("Version", []interface{}{arg1})
	fake.versionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexManager) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeIndexManager) VersionCalls(stub func(string) string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = stub
}

func (fake *FakeIndexManager) VersionArgsForCall(i int) string {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	argsForCall := fake.versionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIndexManager) VersionReturns(result1 string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeIndexManager) VersionReturnsOnCall(i int, result1 string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeIndexManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aliasNameMutex.RLock()
	defer fake.aliasNameMutex.RUnlock()
	fake.createIndexMutex.RLock()
	defer fake.createIndexMutex.RUnlock()
	fake.deleteIndexMutex.RLock()
	defer fake.deleteIndexMutex.RUnlock()
	fake.indexNameMutex.RLock()
	defer fake.indexNameMutex.RUnlock()
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	fake.loadMappingsMutex.RLock()
	defer fake.loadMappingsMutex.RUnlock()
	fake.mappingMutex.RLock()
	defer fake.mappingMutex.RUnlock()
	fake.runMigrationsMutex.RLock()
	defer fake.runMigrationsMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIndexManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ indexmanager.IndexManager = new(FakeIndexManager)
